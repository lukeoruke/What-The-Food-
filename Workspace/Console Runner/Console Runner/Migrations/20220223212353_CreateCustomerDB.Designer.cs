// <auto-generated />
using Class1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Console_Runner.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220223212353_CreateCustomerDB")]
    partial class CreateCustomerDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Console_Runner.Food.FoodItem", b =>
                {
                    b.Property<string>("barcode")
                        .HasColumnType("varchar(255)");

                    b.HasKey("barcode");

                    b.ToTable("foodItems");
                });

            modelBuilder.Entity("Console_Runner.Food.FoodLabel", b =>
                {
                    b.Property<string>("labelID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("barcode")
                        .HasColumnType("varchar(255)");

                    b.HasKey("labelID", "barcode");

                    b.ToTable("foodLabel");
                });

            modelBuilder.Entity("Console_Runner.Food.Vitamins", b =>
                {
                    b.Property<string>("labelID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("vitaminName")
                        .HasColumnType("varchar(255)");

                    b.HasKey("labelID", "vitaminName");

                    b.ToTable("vitamins");
                });

            modelBuilder.Entity("Console_Runner.History", b =>
                {
                    b.Property<string>("email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("foodItems")
                        .HasColumnType("varchar(255)");

                    b.HasKey("email", "foodItems");

                    b.ToTable("history");
                });

            modelBuilder.Entity("Console_Runner.user_permissions", b =>
                {
                    b.Property<string>("email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("permission")
                        .HasColumnType("varchar(255)");

                    b.HasKey("email", "permission");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("Food_Class_Library.Ingredient", b =>
                {
                    b.Property<string>("labelID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ingredientName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("shorterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("labelID", "ingredientName");

                    b.ToTable("ingredient");
                });

            modelBuilder.Entity("Food_Class_Library.NutritionLabel", b =>
                {
                    b.Property<string>("labelID")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("A")
                        .HasColumnType("double");

                    b.Property<int>("AddedSugar")
                        .HasColumnType("int");

                    b.Property<double>("B12")
                        .HasColumnType("double");

                    b.Property<double>("B6")
                        .HasColumnType("double");

                    b.Property<double>("Biotin")
                        .HasColumnType("double");

                    b.Property<double>("C")
                        .HasColumnType("double");

                    b.Property<double>("Calcium")
                        .HasColumnType("double");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<double>("Chloride")
                        .HasColumnType("double");

                    b.Property<int>("Cholesterol")
                        .HasColumnType("int");

                    b.Property<double>("Choline")
                        .HasColumnType("double");

                    b.Property<double>("Chromium")
                        .HasColumnType("double");

                    b.Property<double>("Copper")
                        .HasColumnType("double");

                    b.Property<double>("D")
                        .HasColumnType("double");

                    b.Property<int>("DietaryFiber")
                        .HasColumnType("int");

                    b.Property<double>("E")
                        .HasColumnType("double");

                    b.Property<double>("Folate")
                        .HasColumnType("double");

                    b.Property<double>("Iodine")
                        .HasColumnType("double");

                    b.Property<double>("Iron")
                        .HasColumnType("double");

                    b.Property<double>("K")
                        .HasColumnType("double");

                    b.Property<double>("Magnesium")
                        .HasColumnType("double");

                    b.Property<double>("Manganese")
                        .HasColumnType("double");

                    b.Property<double>("Molybdenum")
                        .HasColumnType("double");

                    b.Property<double>("Niacin")
                        .HasColumnType("double");

                    b.Property<double>("PantothenicAcid")
                        .HasColumnType("double");

                    b.Property<double>("Phosphorus")
                        .HasColumnType("double");

                    b.Property<double>("Potassium")
                        .HasColumnType("double");

                    b.Property<int>("Protein")
                        .HasColumnType("int");

                    b.Property<double>("Riboflavin")
                        .HasColumnType("double");

                    b.Property<int>("SaturatedFat")
                        .HasColumnType("int");

                    b.Property<double>("Selenium")
                        .HasColumnType("double");

                    b.Property<double>("ServingSize")
                        .HasColumnType("double");

                    b.Property<int>("Servings")
                        .HasColumnType("int");

                    b.Property<int>("Sodium")
                        .HasColumnType("int");

                    b.Property<double>("Thiamin")
                        .HasColumnType("double");

                    b.Property<int>("TotalCarbohydrate")
                        .HasColumnType("int");

                    b.Property<int>("TotalFat")
                        .HasColumnType("int");

                    b.Property<int>("TotalSugars")
                        .HasColumnType("int");

                    b.Property<int>("TransFat")
                        .HasColumnType("int");

                    b.Property<double>("Zinc")
                        .HasColumnType("double");

                    b.HasKey("labelID");

                    b.ToTable("nutritionLabels");
                });

            modelBuilder.Entity("Logger.Logs", b =>
                {
                    b.Property<string>("Date")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Time")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("toLog")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Date", "Time", "toLog");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("User.Account", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Email");

                    b.ToTable("accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
